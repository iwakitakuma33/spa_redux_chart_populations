{"version":3,"sources":["utils/apiFetcher/index.ts","constants/apiConfig.ts","store/actionTypes.ts","components/CheckBoxField.tsx","store/populations/action.ts","store/graph/action.ts","constants/graphConfig.ts","components/Graph.tsx","store/prefectures/selectore.ts","constants/contents.ts","store/graph/selectore.ts","components/Main.tsx","store/prefectures/action.ts","App.tsx","store/prefectures/reducer.ts","store/graph/reducer.ts","store/populations/reducer.ts","store/index.ts","reportWebVitals.ts","index.tsx"],"names":["Method","apiConfig","endpoints","population","composition","onePrefPerYear","prefectures","all","axios","Axios","create","headers","process","apiFetcher","endpoint","makeRequest","GET","method","url","ActionTypes","Styles","checkcardList","display","flexWrap","padding","justifyContent","justifySelf","text","marginLeft","cursor","checkcard","borderBottom","textAlign","margin","label","fontSize","marginRight","CheckBoxField","dispatch","useDispatch","handleClickCheck","prefName","prefCode","check","apiEndpointPre","replace","String","then","results","populationData","data","result","type","payload","fetchGraphData","deletePoplation","deleteGraphData","formatPrefName","indentCount","length","repeat","style","map","prefecture","name","onChange","event","target","checked","id","htmlFor","graphConfig","title","xLabel","yLabel","graph","Graph","options","xAxis","categories","yAxis","series","e","highcharts","Highcharts","selectPrefs","state","prefs","contents","populations","selectGraph","Main","useSelector","useEffect","apiEndpointPrefsALL","App","className","initPrefs","message","initGraph","initPopulation","RootReducer","combineReducers","action","console","log","filter","item","checkedGraph","prefParam","pd","push","year","value","tmp","store","createStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.010250e3.chunk.js","sourcesContent":["import Axios from \"axios\";\n\nconst BASE_URL = \"https://opendata.resas-portal.go.jp/api/v1\";\n\nconst axios = Axios.create({\n  headers: {\n    \"X-API-KEY\": process.env.REACT_APP_API_KEY,\n  },\n});\n\nenum Method {\n  GET = \"GET\",\n  POST = \"POST\",\n  PATCH = \"PATCH\",\n  PUT = \"PUT\",\n  DELETE = \"DELETE\",\n}\n\nexport const apiFetcher = {\n  get(endpoint: string) {\n    return makeRequest(endpoint, Method.GET);\n  },\n  post(endpoint: string) {\n    return makeRequest(endpoint, Method.POST);\n  },\n  put(endpoint: string) {\n    return makeRequest(endpoint, Method.PUT);\n  },\n  delete(endpoint: string) {\n    return makeRequest(endpoint, Method.DELETE);\n  },\n  patch(endpoint: string) {\n    return makeRequest(endpoint, Method.PATCH);\n  },\n};\n\nfunction makeRequest(endpoint: string, method: Method) {\n  return axios({\n    url: `${BASE_URL}${endpoint}`,\n    method,\n  });\n}\n","export const apiConfig = {\n  endpoints: {\n    population: {\n      composition: {\n        onePrefPerYear: \"/population/composition/perYear?prefCode=:prefCode\",\n      },\n    },\n    prefectures: {\n      all: \"/prefectures\",\n    },\n  },\n};\n","export const ActionTypes = {\n  FETCH_PREFS: \"PREFS_ACTIONS/FETCH_PREFS\",\n  FETCH_POPULATION: \"POPLATION_ACTIONS/FETCH_POPULATION\",\n  DELETE_POPULATION: \"POPLATION_ACTIONS/DELETE_POPULATION\",\n  FETCHE_GRAPHDATA: \"GRAPH_ACTIONS/FETCHE_GRAPHDATA\",\n  DELETE_GRAPHDATA: \"GRAPH_ACTIONS/DELETE_GRAPHDATA\",\n} as const;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { apiConfig } from \"../constants/apiConfig\";\nimport { apiFetcher } from \"../utils/apiFetcher/index\";\n\nimport { fetchPoplation, deletePoplation } from \"../store/populations/action\";\nimport { fetchGraphData, deleteGraphData } from \"../store/graph/action\";\nimport { Prefectures } from \"../store/prefectures/types\";\n\ntype PropsCheckBoxField = {\n  label: string;\n  prefectures: Prefectures;\n};\nconst CheckBoxField: React.FC<PropsCheckBoxField> = ({\n  label,\n  prefectures,\n}) => {\n  const dispatch = useDispatch();\n\n  const handleClickCheck = (\n    prefName: string,\n    prefCode: number,\n    check: boolean\n  ) => {\n    const apiEndpointPre =\n      apiConfig.endpoints.population.composition.onePrefPerYear.replace(\n        \":prefCode\",\n        String(prefCode)\n      );\n\n    if (check) {\n      apiFetcher.get(apiEndpointPre).then((results) => {\n        dispatch(\n          fetchPoplation({\n            prefName: prefName,\n            prefCode: prefCode,\n            data: results.data.result.data[0].data,\n          })\n        );\n        dispatch(\n          fetchGraphData({\n            prefName: prefName,\n            prefCode: prefCode,\n            data: results.data.result.data[0].data,\n          })\n        );\n      });\n    } else {\n      dispatch(deletePoplation(prefCode));\n      dispatch(deleteGraphData(prefCode));\n    }\n  };\n\n  const formatPrefName = (prefName: string) => {\n    const indentCount: number = 4 - prefName.length;\n    const indentStr = \"　\";\n    return indentStr.repeat(indentCount) + prefName;\n  };\n\n  return (\n    <>\n      <h2 style={Styles.label}>{label}</h2>\n\n      <div style={Styles.checkcardList}>\n        {prefectures.result.map((prefecture) => (\n          <div style={Styles.checkcard} key={prefecture.prefName}>\n            <input\n              type=\"checkbox\"\n              name=\"Prefecture name\"\n              onChange={(event) =>\n                handleClickCheck(\n                  prefecture.prefName,\n                  prefecture.prefCode,\n                  event.target.checked\n                )\n              }\n              id={\"checkbox\" + prefecture.prefCode}\n            />\n            <label\n              style={Styles.text}\n              htmlFor={\"checkbox\" + prefecture.prefCode}\n            >\n              {formatPrefName(prefecture.prefName)}\n            </label>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  checkcardList: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    padding: \"10px\",\n    justifyContent: \"flex-start\",\n    justifySelf: \"auto\",\n  },\n  text: { display: \"contents\", marginLeft: \"1em\", cursor: \"pointer\" },\n  checkcard: {\n    borderBottom: \"solid 1px\",\n    textAlign: \"center\",\n    padding: \"4px\",\n    margin: \"0.5rem\",\n  },\n  label: {\n    fontSize: \"20px\",\n    padding: \"0.5rem 2rem\",\n    borderBottom: \"2px solid #000\",\n    marginLeft: \"15pt\",\n    marginRight: \"15pt\",\n  },\n};\n\nexport default CheckBoxField;\n","import { PopulationData, PopulationsActionTypes } from \"./types\";\nimport { ActionTypes } from \"../actionTypes\";\n\nexport const fetchPoplation = (\n  populationData: PopulationData\n): PopulationsActionTypes => {\n  return {\n    type: ActionTypes.FETCH_POPULATION,\n    payload: populationData,\n  };\n};\n\nexport const deletePoplation = (prefCode: number): PopulationsActionTypes => {\n  return {\n    type: ActionTypes.DELETE_POPULATION,\n    payload: prefCode,\n  };\n};\n","import { GraphsActionTypes } from \"./types\";\nimport { ActionTypes } from \"../actionTypes\";\n\nimport { PopulationData } from \"../populations/types\";\n\nexport const fetchGraphData = (\n  populationData: PopulationData\n): GraphsActionTypes => {\n  return {\n    type: ActionTypes.FETCHE_GRAPHDATA,\n    payload: populationData,\n  };\n};\n\nexport const deleteGraphData = (prefCode: number): GraphsActionTypes => {\n  return {\n    type: ActionTypes.DELETE_GRAPHDATA,\n    payload: prefCode,\n  };\n};\n","type graphType = {\n  type: \"line\";\n  graphName: string;\n  graphLabel: {\n    title: string;\n    xLabel: string;\n    yLabel: string;\n  };\n};\n\nexport const graphConfig: graphType = {\n  type: \"line\",\n  graphName: \"都道府県\",\n  graphLabel: {\n    title: \"総人口推移\",\n    xLabel: \"年度\",\n    yLabel: \"人口数\",\n  },\n};\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nimport { graphConfig } from \"../constants/graphConfig\";\nimport { graphSeries } from \"../store/graph/types\";\ntype PropsGraph = {\n  label: string;\n  graph: graphSeries[];\n};\nconst Graph: React.FC<PropsGraph> = ({ label, graph }) => {\n  const options: Highcharts.Options = {\n    title: {\n      text: graphConfig.graphLabel.title,\n    },\n    xAxis: {\n      title: {\n        text: graphConfig.graphLabel.xLabel,\n      },\n      categories: graph.length == 0 ? [] : graph[0].categories,\n    },\n    yAxis: {\n      title: {\n        text: graphConfig.graphLabel.yLabel,\n      },\n    },\n    series: graph.map((e) => e.series[0]),\n  };\n\n  return (\n    <>\n      <h2 style={Styles.label}>{label}</h2>\n      <div style={Styles.graph}>\n        <HighchartsReact highcharts={Highcharts} options={options} />\n      </div>\n    </>\n  );\n};\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  graph: {\n    padding: \"12px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    padding: \"0.5rem 2rem\",\n    borderBottom: \"2px solid #000\",\n    marginLeft: \"15pt\",\n    marginRight: \"15pt\",\n  },\n};\n\nexport default Graph;\n","import { RootState } from \"..\";\nimport { Prefectures } from \"./types\";\n\nexport const selectPrefs = (state: RootState): Prefectures => state.prefs;\n","export const contents = {\n  title: \"都道府県別の総人口推移グラフ\",\n  label: {\n    prefs: \"都道府県\",\n    populations: \"グラフ\",\n  },\n};\n","import { RootState } from \"..\";\nimport { graphSeries } from \"./types\";\n\nexport const selectGraph = (state: RootState): graphSeries[] => state.graph;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport CheckBoxField from \"./CheckBoxField\";\nimport Graph from \"./Graph\";\n\nimport { fetchPrefs } from \"../store/prefectures/action\";\nimport { selectPrefs } from \"../store/prefectures/selectore\";\n\nimport { apiFetcher } from \"../utils/apiFetcher/index\";\nimport { apiConfig } from \"../constants/apiConfig\";\nimport { contents } from \"../constants/contents\";\nimport { selectGraph } from \"../store/graph/selectore\";\n\nconst Main: React.FC = () => {\n  const dispatch = useDispatch();\n  const prefectures = useSelector(selectPrefs);\n  const graph = useSelector(selectGraph);\n\n  useEffect(() => {\n    const apiEndpointPrefsALL = apiConfig.endpoints.prefectures.all;\n    apiFetcher.get(apiEndpointPrefsALL).then((results) => {\n      dispatch(fetchPrefs(results.data));\n    });\n  }, []);\n\n  return (\n    <main>\n      {prefectures &&\n        CheckBoxField({\n          label: contents.label.prefs,\n          prefectures: prefectures,\n        })}\n      {Graph({ label: contents.label.populations, graph: graph })}\n    </main>\n  );\n};\n\nexport default Main;\n","import { Prefectures, PrefsActionTypes } from \"./types\";\n\nimport { ActionTypes } from \"../actionTypes\";\n\nexport const fetchPrefs = (prefs: Prefectures): PrefsActionTypes => {\n  return {\n    type: ActionTypes.FETCH_PREFS,\n    payload: prefs,\n  };\n};\n","import React from \"react\";\nimport Main from \"./components/Main\";\nimport { contents } from \"./constants/contents\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header style={{ textAlign: \"center\" }}>\n        <h1>{contents.title}</h1>\n      </header>\n      <Main />\n    </div>\n  );\n};\n\nexport default App;\n","import { ActionTypes } from \"../actionTypes\";\nimport { Prefectures, PrefsActionTypes } from \"./types\";\nimport { FSA } from \"../typeFSA\";\n\nexport const initPrefs: Prefectures = {\n  message: \"prefs init\",\n  result: [],\n};\nexport const PrefsReducer = (\n  state = initPrefs,\n  action: PrefsActionTypes\n): Prefectures => {\n  switch (action.type) {\n    case ActionTypes.FETCH_PREFS: {\n      const { payload } = action as FSA<\n        typeof ActionTypes.FETCH_PREFS,\n        Prefectures\n      >;\n      if (payload) {\n        if (initPrefs === state) {\n          console.log(\"init\");\n          return { ...payload };\n        } else {\n          return { ...state, ...payload };\n        }\n      }\n      return state;\n    }\n\n    default:\n      return state;\n  }\n};\n","import { ActionTypes } from \"../actionTypes\";\nimport { graphSeries, serieType } from \"./types\";\nimport { PopulationData } from \"../populations/types\";\nimport { GraphsActionTypes } from \"./types\";\nimport { FSA } from \"../typeFSA\";\n\nexport const initGraph: graphSeries[] = [];\nexport const GraphReducer = (\n  state = initGraph,\n  action: GraphsActionTypes\n): graphSeries[] => {\n  switch (action.type) {\n    case ActionTypes.FETCHE_GRAPHDATA: {\n      const { payload } = action as FSA<\n        typeof ActionTypes.FETCHE_GRAPHDATA,\n        PopulationData\n      >;\n\n      if (payload) {\n        const checkedGraph: graphSeries = {\n          prefParam: {\n            prefCode: payload.prefCode,\n            prefName: payload.prefName,\n          },\n          series: [],\n          categories: [],\n        };\n        const data: number[] = [];\n        for (const pd of payload.data) {\n          checkedGraph.categories.push(String(pd.year));\n          data.push(pd.value);\n        }\n        const tmp: serieType = {\n          type: \"line\",\n          name: payload.prefName,\n          data: data,\n        };\n        checkedGraph.series?.push(tmp);\n        state.push(checkedGraph);\n        return [...state];\n      } else {\n        return state;\n      }\n    }\n    case ActionTypes.DELETE_GRAPHDATA: {\n      const { payload } = action as FSA<\n        typeof ActionTypes.DELETE_GRAPHDATA,\n        number\n      >;\n\n      return state.filter((e) => e.prefParam.prefCode != payload);\n    }\n    default:\n      return state;\n  }\n};\n","import { ActionTypes } from \"../actionTypes\";\nimport { PopulationData, PopulationsActionTypes } from \"./types\";\nimport { FSA } from \"../typeFSA\";\n\nexport const initPopulation: PopulationData[] = [];\nexport const PopulationsReducer = (\n  state = initPopulation,\n  action: PopulationsActionTypes\n): PopulationData[] => {\n  switch (action.type) {\n    case ActionTypes.FETCH_POPULATION: {\n      const { payload } = action as FSA<\n        typeof ActionTypes.FETCH_POPULATION,\n        PopulationData\n      >;\n      if (payload) {\n        return [...state, payload];\n      } else {\n        return [...state];\n      }\n    }\n    case ActionTypes.DELETE_POPULATION: {\n      const { payload } = action as FSA<\n        typeof ActionTypes.DELETE_POPULATION,\n        number\n      >;\n      if (payload) {\n        return state.filter((item) => item.prefCode !== payload);\n      } else {\n        return [...state];\n      }\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore } from \"redux\";\n\nimport { PrefsReducer } from \"./prefectures/reducer\";\nimport { GraphReducer } from \"./graph/reducer\";\nimport { PopulationsReducer } from \"./populations/reducer\";\n\nconst RootReducer = combineReducers({\n  prefs: PrefsReducer,\n  populations: PopulationsReducer,\n  graph: GraphReducer,\n});\n\nexport type RootState = ReturnType<typeof RootReducer>;\n\nconst store = createStore(RootReducer);\nexport default store;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}